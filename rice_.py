# -*- coding: utf-8 -*-
"""rice .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0n0dKP1-ArrlXhA1knSrTc1fHXFKUE2
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report, RocCurveDisplay
# Removed: import plot_roc_curve, confusion_matrix,precision_recall_fscore_support

import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

df = pd.read_csv(r'Rice_Osmancik_Cammeo_Dataset.csv')
df.head()

df['CLASS'].replace('Cammeo', 0,inplace=True)
df['CLASS'].replace('Osmancik', 1,inplace=True)


plt.figure(figsize=(20, 10))
sns.heatmap(df.corr(), annot=True)

df.drop(labels=['CONVEX_AREA', 'PERIMETER', 'MAJORAXIS', 'MINORAXIS'], axis=1, inplace=True)

df.head()

df.isnull().sum()

df.shape

X=df.iloc[:, :-1]
X.head()

from sklearn.preprocessing import LabelEncoder
y=df.iloc[:,-1]

rice_encoder = LabelEncoder()
y = rice_encoder.fit_transform(y)
y

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

from sklearn.svm import SVC
svc=SVC() #Default hyperparameters
svc.fit(X_train,y_train)
y_pred=svc.predict(X_test)
print('Accuracy Score:')
print(accuracy_score(y_test,y_pred))
print('Confusion matrix:')
print(confusion_matrix(y_test,y_pred).ravel())

cr = classification_report(y_test,y_pred)

print(cr)

from sklearn.neighbors import KNeighborsClassifier
neighbors = np.arange(1,8)
train_accuracy =np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

for i,k in enumerate(neighbors):
    #Setup a knn classifier with k neighbors
    knn = KNeighborsClassifier(n_neighbors=k)

    #Fit the model
    knn.fit(X_train, y_train)

    #Compute accuracy on the training set
    train_accuracy[i] = knn.score(X_train, y_train)

    # Predict
    y_pred = knn.predict(X_test)

    #Compute accuracy on the test set
    test_accuracy[i] = knn.score(X_test, y_test)

#Generate plot
plt.title('k-NN Varying number of neighbors')
plt.plot(neighbors, test_accuracy, label='Testing Accuracy')
plt.plot(neighbors, train_accuracy, label='Training accuracy')
plt.legend()
plt.xlabel('Number of neighbors')
plt.ylabel('Accuracy')
plt.show()

print('Accuracy Score:')
print(accuracy_score(y_test,y_pred))
print('Confusion matrix:')
print(confusion_matrix(y_test,y_pred).ravel())
cr = classification_report(y_test,y_pred)
print(cr)